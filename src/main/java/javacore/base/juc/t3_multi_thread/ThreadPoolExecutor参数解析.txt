
线程池不允许使用Executors去创建,而是通过ThreadPoolExecutor的方式,规避资源耗尽的风险。
说明:Executors返回的线程池对象的弊端如下:
  1）FixedThreadPool和SingleThreadPool:
    允许的请求队列长度为Integer.MAX_VALUE,可能会堆积大量的请求,从而导致OOM。
  2）CachedThreadPool:
    允许的创建线程数量为Integer.MAX_VALUE,可能会创建大量的线程,从而导致OOM。
 @param corePoolSize 常驻核心线程数,一直会保留,除非手动设置允许 {@code allowCoreThreadTimeOut:允许回收}
 @param maximumPoolSize 最大线程数(核心线程数+非核心线程数)
 @param keepAliveTime 非核心线程数的最大等待时间,当线程空闲时间达到keepAliveTime时,线程会退出并回收,直到线程数量=corePoolSize
 @param unit 定义{@code keepAliveTime}单位
 @param workQueue 存放任务的队列
                  当核心线程处理不过来, 新的任务会加入队列.
                  当队列满了之后,如果没有可用核心线程, 则会启动新的线程,且不会超过最大线程数
                  当队列满了之后,如果线程数也达到最大值了, 则会开启拒绝策略来拒收新的任务
线程池按以下行为执行任务:
 1. 当执行线程数小于核心线程数时,创建线程。
 2. 当执行线程数大于等于核心线程数,且任务队列未满时,将任务放入任务队列。
 3. 当执行线程数大于等于核心线程数,且任务队列已满
    - 若执行线程数小于最大线程数,创建新线程, 空闲后会自动销毁。
    - 若执行线程数等于最大线程数,抛出异常,拒绝任务

  任务队列主要有4种拒绝策略：
  AbortPolicy(默认)：直接丢弃任务，抛出异常
  DiscardPolicy：直接丢弃任务，也不抛出异常
  CallerRunsPolicy：只用调用者所在的线程来处理任务,表现为当前页面被阻塞住了，直到当前调用者所在的线程执行完毕
  DiscardOldestPolicy：丢弃等待队列中最旧的任务，并执行当前任务
